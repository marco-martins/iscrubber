// Generated by CoffeeScript 1.8.0

/*
  jQuery iScrubber plugin 1.1.0
  
  @preserve
  Created by Marco Martins
  https://github.com/skarface/iscrubber.git
 */

(function() {
  (function($) {
    return $.fn.iscrubber = function(customOptions) {
      var options, scrub;
      $.fn.iscrubber.defaultOptions = {
        showItem: 1,
        leaveToFirst: true,
        additionalScrubKnobs: false
      };

      /* Set the options */
      options = $.extend({}, $.fn.iscrubber.defaultOptions, customOptions);

      /* scrub function */
      scrub = function(elements, itemToShow) {
        if (options.hideWithClass) {
          elements.addClass(options.hideWithClass);
          return $(elements[itemToShow - 1]).removeClass(options.hideWithClass);
        } else {
          elements.css('display', 'none');
          return $(elements[itemToShow - 1]).css('display', 'block');
        }
      };
      return this.each(function() {
        var $knobs, $scrubberlist, elements, scrubber_data_id, trigger, width;
        $scrubberlist = $(this);
        if ($scrubberlist.data('iscrubber-enabled')) {
          return;
        }
        $scrubberlist.data('iscrubber-enabled', true);

        /* get elements */
        elements = $scrubberlist.find('li');

        /* set correct width from children and add minimal css require */
        width = elements.first().width();
        $scrubberlist.width(width).css('padding', 0);

        /* get trigger width => (scrubber width / number of children) */
        trigger = width / $scrubberlist.children().length;

        /* show first element */
        scrub(elements, options.showItem);

        /* bind event when mouse moves over scrubber */
        $scrubberlist.on('mousemove.iscrubber', function(e) {

          /* get x mouse position */
          var index, x;
          x = e.pageX - $scrubberlist.offset().left;

          /* get the index of image to display on top */
          index = Math.ceil(x / trigger);
          if (index === 0) {
            index = 1;
          }
          if ((index + 1) > elements.length) {
            index = elements.length;
          }
          return scrub(elements, index);
        });

        /* bind event when mouse leaves scrubber */
        $scrubberlist.on('mouseleave.iscrubber', function() {
          if (options.leaveToFirst === true) {
            return scrub(elements, options.showItem);
          }
        });
        if (options.additionalScrubKnobs) {
          scrubber_data_id = $scrubberlist.data('scrubber');
          $knobs = $('html').find('a[data-scrubber="' + scrubber_data_id + '"]');
          return $knobs.each(function() {
            var $knob, k_trigger, k_width;
            $knob = $(this);
            k_width = $knob.width();
            k_trigger = k_width / $scrubberlist.children().length;
            $knob.on('mousemove.iscrubber', function(e) {
              var k_index, k_x;
              k_x = e.pageX - $knob.offset().left;
              k_index = Math.ceil(k_x / k_trigger);
              if (k_index === 0) {
                k_index = 1;
              }
              if ((k_index + 1) > elements.length) {
                k_index = elements.length;
              }
              return scrub(elements, k_index);
            });
            return $knob.on('mouseleave.iscrubber', function() {
              if (options.leaveToFirst === true) {
                return scrub(elements, options.showItem);
              }
            });
          });
        }
      });
    };
  })(jQuery);

}).call(this);

//# sourceMappingURL=jquery.iscrubber.js.map
